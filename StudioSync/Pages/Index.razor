@page "/"
@page "/{SynchroCode}"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http;
@using StudioSync.Core;
@using System.Net.Http.Json
@using System.Text.Encodings.Web
@inject HttpClient Http
@inject NavigationManager MyNavigationManager
@inject IJSRuntime JSRuntime;

<PageTitle>@FriendryName - StudioSync</PageTitle>

@code{
    List<Message> chats = new List<Message>();
    System.Timers.Timer Timer = new System.Timers.Timer(1000);
    private ElementReference canvasElement;
    string ChatSendingText = "";
    string NowTime = "00:00:00";
    string MainTime = "00:00";
    string NewSyncCode = "";
    string FlowText = "サーバーとシンクロ中";
    string FriendryName = "スタジオ";
    string ServerAddress = "https://api.wsoft.ws/studio-sync";
    string ClientID = Guid.NewGuid().ToString("N");
    string GiphySearch = "Funny";
    List<string> GiphyResults = new List<string>();
    Progress UsingProgress = new Progress();
    DateTime TimeLimit = DateTime.MinValue;
    TimeSpan CountUp = TimeSpan.Zero;
    TimeSpan TimeMax = TimeSpan.Zero;
    DateTime LastUpdate = DateTime.Now;
    int cd = -1;
    bool Editing = false;
    bool timering = false;
    bool finish = false;
    bool fastrecive = false;
    string Script="3:00";
    int syncCount = 0;
    int syncSecs = 2;
    bool Initailzed = false;
    bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    HubConnection hubConnection;

    [Parameter]
    public string SynchroCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var resp = await Http.GetAsync(ServerAddress+"/version");
            var r = await resp.Content.ReadFromJsonAsync<AcceptRequirements>();
            if (r.MinClientVersion > version.Version)
            {
                Initailzed = true;
                await ShowModal("forbiddenModal");
                return;
            }

        }
        catch
        {
            Initailzed = true;
            await ShowModal("forbiddenModal");
            return;
        }
        Timer.Elapsed +=  async (object? sender, System.Timers.ElapsedEventArgs e)=>
        {
            DateTime time = DateTime.Now;
            NowTime = time.ToString("HH:mm:ss");
            if (finish)
            {
                MainTime = "00:00";
            }
            else

            if (timering)
            {
                TimeMax -= TimeSpan.FromSeconds(1); CountUp += TimeSpan.FromSeconds(1);
                MainTime = TimeMax.Minutes + ":"+TimeMax.Seconds;
                if (TimeMax == TimeSpan.Zero)
                {
                    timering = false;
                    finish = true;
                }

            }else
            if (cd != -1)
            {
                cd--;
                MainTime = "00:0"+cd;
                if (cd == 0)
                {
                    cd = -1;
                    timering = true;
                    finish = false;
                }
            }else
            if (TimeLimit.Minute == time.Minute && TimeLimit.Second == time.Second)
            {
                TimeMax = UsingProgress.Total;
                //タイマー開始
                cd = 3;
                MainTime = "00:0"+cd;
            }
            if (syncCount == syncSecs)
            {
                syncCount = 0;
                if (Editing)
                {
                    if (Script == null)
                    {
                        Script = "";
                    }
                    await hubConnection.InvokeAsync("PopScript", SynchroCode,Script);
                    StateHasChanged();
                }
                else
                {

                    await hubConnection.InvokeAsync("Fetch", SynchroCode);
                }
            }
            else
            {
                syncCount++;
            }
            StateHasChanged();
        };
        var hub2 = new HubConnectionBuilder();
        hubConnection = hub2.WithUrl(ServerAddress+"/connect").WithAutomaticReconnect().Build();
        hubConnection.On<string,string>("ReciveMessage", (string name, string message) =>
    {
        var ct_e = new ChatEntry();
        ct_e.Name = name;
        ct_e.Content = message;
        ct_e.Recived = DateTime.Now;
        ct_e.IsSystemMessage = false;


    });
        hubConnection.On<string>("Sync", (string script) =>
        {
            if (!Editing)
            {
                Script = script;
                hubConnection.InvokeAsync("SaveSync", Script, SynchroCode);
            }

        });
        hubConnection.On<string>("TimerStart", (string script) =>
        {
            Script = script;
            UsingProgress = new Progress(script);
            TimeMax = UsingProgress.Total;
            //タイマー開始
            cd = 3;
            MainTime = "00:0" + cd;
            /*
            NowTime = "シンクロ中";
            string raw = script.Split('|')[1];
            string d = script.Split('|')[0];
            Script = raw;
            UsingProgress = new Progress(raw);
            TimeLimit = DateTime.Parse(d);
        */
        });
        hubConnection.On("TimerPause", () =>
        {
            timering=false;
            finish = true;
        });
        hubConnection.On<Session>("Clock", async(Session session) =>
        {
            if (!Editing)
            {
                Script = session.Scenario.RawScript;
            }
            chats = session.Messages;
            if (session.LifeChecking)
            {
                //フラグが立っていたらLifeCheckを送り返す
                await hubConnection.InvokeAsync("LifeCheck",SynchroCode);
            }
            if (!fastrecive)
            {
                //初めての受信完了フラグを設定する
                fastrecive = true;
                Initailzed = true;

            }
            LastUpdate = DateTime.Now;
            StateHasChanged();
        });
        await hubConnection.StartAsync();

        Timer.Start();

        SearchGiphy();
        Initailzed = true;
        await ShowModal("welcomeModal");


    }
    async void SearchGiphy()
    {
        try{
            string query = UrlEncoder.Default.Encode(GiphySearch);
            var resp = await Http.GetAsync("https://api.giphy.com/v1/gifs/search?api_key=cexYwZ98TYZw7BIh0uptHoakXA7MbZty&q="+query+"&limit=11");
            var r = await resp.Content.ReadFromJsonAsync<Giphy.Giphy>();
            GiphyResults.Clear();
            foreach(var d in r.Data)
            {
                try
                {
                    GiphyResults.Add(d.Images.fixed_height_downsampled.Webp);
                }catch{}
        }
        }
        catch
        {
            
        }
    }
    async Task ShowModal(string id)
    {
        await JSRuntime.InvokeVoidAsync("showModal",id);
    }
    async Task OnCoreWelcome()
    {

        MyNavigationManager.NavigateTo($"/" + SynchroCode, false);
        await OnJoinWelcome();
    }
    async void OnWelcome()
    {
        SynchroCode = NewSyncCode;
        await OnCoreWelcome();
    }
    async void OnRandomWelcome()
    {
        Random random = new Random();
        SynchroCode = (random.Next(100000, 999999)).ToString();
        await OnCoreWelcome();
    }
    async Task OnJoinWelcome()
    {
        Initailzed = false;
        FlowText = "セッションに参加中";
        fastrecive = false;
        StateHasChanged();
        await hubConnection.InvokeAsync("Join", SynchroCode,FriendryName);

    }
    async void OnLeave()
    {
        await hubConnection.InvokeAsync("Bye", SynchroCode, FriendryName);
        OnWelcome();
    }
    async void OnChatSend()
    {
        if (!string.IsNullOrEmpty(ChatSendingText))
        {
            await hubConnection.InvokeAsync("Send", FriendryName, ChatSendingText,SynchroCode);
            ChatSendingText = string.Empty;
        }
    }
    async void OnStampSend(string url)
    {
        if (!string.IsNullOrEmpty(url))
        {
            ChatSendingText += " img-" + url;
            OnChatSend();
        }
    }
    async void OnConnectionChange()
    {
        if (IsConnected)
        {
            await hubConnection.StopAsync();
        }
        await hubConnection.StartAsync();
    }
    async void OnSaveSync()
    {
        await hubConnection.InvokeAsync("SaveSync",Script,SynchroCode);
    }
    async void OnTimerStart()
    {
        var progress = new Progress(Script);
        await hubConnection.InvokeAsync("Send", FriendryName,progress.Total.Minutes+":"+progress.Total.Seconds+"のタイマーを開始しました", SynchroCode);
        //タイマー同期時刻を計算
        var dt = DateTime.Now;
        dt=dt.AddSeconds(5);
        //計算した時刻でタイマーを開始するよう広告
        await hubConnection.InvokeAsync("TimerStartAd",Script, SynchroCode);
    }
    async void OnTimerPause()
    {
        await hubConnection.InvokeAsync("TimerPauseAd",SynchroCode);
    }

}

@if (!Initailzed)
{
    <div class="modal-open">
            <div class="modal fade show" tabindex="-1" role="dialog" aria-modal="true" style="display: block;">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <p class="modal-title" id="exampleModalLabel">起動しています</p>
                        </div>
                        <div class="modal-body text-center">
                            <h1>StudioSync</h1>
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>@FlowText</p>
                        </div>
                        <div class="modal-footer">
                            Copylight 2023 WSOFT All rights reserved.
                        </div>
                    </div>
                </div>
            </div>
    </div>
}

<nav class="navbar navbar-expand-lg navbar-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">StudioSync</a>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                
                <li class="nav-item">
                    <input class="form-control me-2" @bind="FriendryName" type="text" placeholder="このデバイスの名前" aria-label="このデバイスの名前">
                </li>
                <li class="nav-item">
                    @if ((DateTime.Now - LastUpdate).TotalSeconds < 3)
                    {
                        <p class="nav-link" tabindex="-1"><span class="text-success"><i class="bi bi-cloud-check-fill"></i>&nbsp;</span>リアルタイム</p>
                    }else{
                        <p class="nav-link" tabindex="-1"><span class="text-warning"><i class="bi bi-cloud-fill"></i>&nbsp;</span>最終更新:@((int)(DateTime.Now - LastUpdate).TotalSeconds)秒前</p>
                    }
                </li>

            </ul>
            <div class="d-flex">
                @if (IsConnected)
                {
                    <button class="btn btn-success" type="button" data-bs-toggle="modal" data-bs-target="#connectionModal"><i class="bi bi-wifi"></i></button>
                }
                else
                {
                    <button class="btn btn-danger" type="button" data-bs-toggle="modal" data-bs-target="#connectionModal"><i class="bi bi-wifi-off"></i></button>
                }
            </div>
        </div>
    </div>
</nav>
<div class="container-fluid">
    <div class="row">
        <div class="col-4">
            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <h4>シナリオ</h4>
                    </div>
                    <div class="col-4">
                        <div class="form-check fs-4">
                            <input class="form-check-input" type="checkbox" @bind="Editing" id="flexCheckDefault">
                            <label class="form-check-label" for="flexCheckDefault">
                                <i class="bi bi-pencil"></i>
                            </label>
                        </div>
                    </div>
                    <div class="col-2">
                        <button type="button" @onclick="OnSaveSync" class="btn btn-primary"><i class="bi bi-cloud-upload"></i></button>
                    </div>
                </div>
            </div>
            <textarea class="form-control" style="height: 100%;" readonly="@(!Editing)" @bind="Script" aria-label="With textarea" placeholder="//台本をここに入力します"></textarea>
        </div>
        <div class="col-4">
            <h4>タイマー</h4>
            <div class="container-fluid">
                <div class="row">
                    <div class="col-6">
                        <p>現在時刻</p>
                        <h2>@NowTime</h2>
                    </div>
                    <div class="col-6">
                        <p>次のシーン/終了まで</p>
                        <h2>00:00</h2>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <p class="text-center fs-4">「「コーナー名」」</p>
                        <p class="text-center" style="font-size: 100px;">@MainTime</p>
                    </div>
                </div>
            </div>
            <div>
                <div class="text-center">
                    <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                        <button type="button" @onclick="OnTimerPause" class="btn btn-danger"><i class="bi bi-square-fill"></i></button>
                        <button type="button" @onclick="OnTimerStart" class="btn btn-success"><i class="bi bi-caret-right-fill"></i></button>
                    </div>
                </div>
                <hr />

                <div class="input-group mb-3">
                    <input type="text" @bind="ChatSendingText" class="form-control" placeholder="メッセージを送信" aria-label="メッセージを送信" aria-describedby="button-addon2">
                    <button class="btn btn-outline-secondary" type="button" id="button-addon2" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne" aria-describedby="button-addon3"><i class="bi bi-emoji-smile"></i></button>
                    <button class="btn btn-primary" type="button" id="button-addon3" @onclick="OnChatSend"><i class="bi bi-send"></i></button>
                </div>
                <div class="accordion accordion-flush" id="accordionFlushExample">
                    <div class="accordion-item">
                        <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
                            <div class="accordion-body">
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" @bind="GiphySearch" placeholder="スタンプを検索" aria-label="スタンプを検索" aria-describedby="button-addon21">
                                    <button class="btn btn-primary" type="button" id="button-addon21" @onclick="SearchGiphy"><i class="bi bi-search"></i></button>
                                </div>
                                <div class="container-fluid">
                                    <div class="row text-center">
                                        @foreach(var img in GiphyResults)
                                        {
                                            <div class="col-4 d-flex align-items-center">
                                                <button class="btn btn-light" @onclick="e=>OnStampSend(img)"><img class="img-fluid img-thumbnail" src="@img" alt="@img" /></button>
                                            </div>
                                        }
                                        <div class="col-4 d-flex align-items-center">
                                            <img class="img-fluid img-thumbnail" src="./img/PoweredBy_200px-White_HorizText.png" alt="Powerd by GIPHY" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <hr/>
                <h3>シンクロ</h3>
                <p>この@(FriendryName)と接続するには、シンクロコードを使用するか、下記のQRコードをスキャンします。</p>
                <p class="text-center">
                    <h4>@SynchroCode</h4>
                    <a href="@(MyNavigationManager.BaseUri+SynchroCode)"><img src="@("https://api.qrserver.com/v1/create-qr-code/?data="+ System.Web.HttpUtility.UrlEncode(MyNavigationManager.BaseUri)+SynchroCode+"&size=200x200")" alt="@(MyNavigationManager.BaseUri+SynchroCode)" /></a>
                    
                </p>
                <p>もしくは、シンクロコードを使って他のセッションに参加することもできます</p>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" @bind="NewSyncCode" placeholder="シンクロコード" aria-label="シンクロコード" aria-describedby="button-addon22">
                    <button class="btn btn-outline-primary" @onclick="OnLeave" type="button" id="button-addon22">シンクロ</button>
                </div>
            </div>
        </div>
        <div class="col-4">
            <h4>チャット</h4>
            <div class="toast-container" id="chat">
                @if (chats.Count > 0)
                {
                    @for(int ix = chats.Count - 1; ix >= 0; --ix)
                    {
                        <ChatEntry Name="@chats[ix].From" Content="@chats[ix].Content" Recived="@chats[ix].SendTime" IsSystemMessage="@chats[ix].IsSystemMessage"></ChatEntry>
                    }
                }

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="connectionModal" tabindex="-1" aria-labelledby="connectionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="connectionModalLabel">この接続について</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="connection-status">
                    @if (IsConnected)
                    {
                        <p>ステータス:<b>接続済み</b></p>
                        <p>現在、この端末は@(ServerAddress)に接続しています。</p>
                        <p>台本やタイマーを同期、チャットの送受信を行うことができます。最終同期時刻は@(LastUpdate.ToString("hh:mm:ss"))です。</p>
                        <p>接続IDは<b>@(hubConnection.ConnectionId)</b>で、セッションIDは<b>@(SynchroCode)</b>です。</p>
                    }
                    else
                    {
                        <p>ステータス:<b>接続していません</b></p>
                        <p>現在、この端末は@(ServerAddress)に接続していません。</p>
                        <p>現在、台本やタイマーを同期、チャットの送受信を行うことができません。</p>
                        <p>自動的に接続を再試行します。それでも上手くいかない場合は、接続先の変更が必要な場合があります。</p>
                    }
                </div>
                <hr/>
               <div id="connection-setting">
                   <h6>接続先の変更</h6>
                   <p>接続できない場合は、StudioSyncServerのアドレスを変更することで接続できるようになることがあります。</p>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="ServerAddress" placeholder="接続先アドレス" aria-label="接続先アドレス" aria-describedby="button-addon23">
                        <button class="btn btn-outline-primary" @onclick="OnConnectionChange" type="button" id="button-addon23">接続</button>
                    </div>
               </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="welcomeModal" tabindex="-1" data-bs-backdrop="static" aria-labelledby="welcomeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="welcomeModalLabel">StudioSyncへようこそ</h5>
            </div>
            <div class="modal-body">
                <p>初めに、この端末の名前を入力してください。</p>
                <input class="form-control me-2" @bind="FriendryName" type="text" placeholder="このデバイスの名前" aria-label="このデバイスの名前"/>
                <hr/>
                @if (string.IsNullOrEmpty(SynchroCode))
                {
                    <p>まだセッションが始まっていない場合、あなたがシンクロコードを作って開始することができます。</p>
                    <div class="text-center">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#welcomeModal" @onclick="OnRandomWelcome">シンクロコードを作って開始</button>
                    </div>
                }
                else
                {
                    <p>次のセッションに招待されました。</p>
                    <div class="text-center">
                        <h2>@SynchroCode</h2>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#welcomeModal" @onclick="OnJoinWelcome">このセッションに参加</button>
                    </div>
                }

                <hr/>
                <p>シンクロコードを使用して、すでに開始している別のセッションに参加することもできます。</p>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" @bind="NewSyncCode" placeholder="シンクロコード" aria-label="シンクロコード" aria-describedby="button-addon24">
                    <button class="btn btn-outline-primary" @onclick="OnWelcome" type="button" data-bs-toggle="modal" data-bs-target="#welcomeModal" id="button-addon24">シンクロ</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="forbiddenModal" tabindex="-2" data-bs-backdrop="static" aria-labelledby="forbiddenModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="forbiddenModalLabel">StudioSyncを使用できません</h5>
            </div>
            <div class="modal-body">
                <p>現在、この端末ではStudioSyncを使用できません。これは次のいずれかが原因である可能性があります。</p>
                <ul>
                    <li>インターネットに接続していない</li>
                    <li>端末またはこのアプリのバージョンが古い</li>
                    <li>サーバーとの接続が拒否された</li>
                </ul>
                <hr/>
                <p>このアプリは、<b>@version.FullName</b>です。</p>
            </div>
        </div>
    </div>
</div>